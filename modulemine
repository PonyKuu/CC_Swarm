-- A "slicing" module program. It digs a "slice" that's 1-wide area of given length and depth
 
os.loadAPI ("module")

-- this function is used to carefuly move forward, digging the blocks below and above the module and not trap it under bedrock
local function safeForward ()
	local success = false
	while not success do
		-- If there is bedrock in front of turtle, move up
		if not module.move("forward") then
			module.move ("up")
		-- If turtle was trapped under the bedrock, go back, move up twice, and try again
		elseif turtle.detectUp () and not turtle.digUp () then
			module.turn ("around")
			module.move ("forward")
			module.move ("up")
			module.move ("up")
			module.turn ("around")
		else
			module.checkSpace ()
			turtle.digDown ()
			module.checkSpace ()
			success = true
		end
	end
end

-- this function is used to move up or down, while digging a 2x1 hole.
local function column (direction, length)
	for i = 1, length-2 do
		turtle.dig ()
		module.checkSpace ()
		if not (module.move (direction)) then
			break
		end
	end
	module.tDig[direction]()
	module.checkSpace ()
end

-- this is the main mining function
local function slice (length, depth)
	-- remember the y coordinate
	local returnY = module.getPosition().y
	-- Let's go down to the required depth.
	column ("down", depth)
	
	-- If length is too small, we can avoid zigzagging back and forth
	-- if it is 3 or 4 we can move two or three times, turn around and go up.
	if length <= 4 then
		for i = 1, length-1 do
			safeForward ()
		end
		module.turn ("around")
		column ("up", returnY - module.getPosition().y)
	-- If length is 5 or more, start making some zig-zags
	else
		while module.getPosition().y < returnY do
			turtle.digUp()
			module.checkSpace()
			for i = 1, length-1 do
				safeForward()
			end
			module.turn ("around")
			for i = 1, 3 do 
				module.move ("up")
			end
		end
		-- finish the line
		turtle.digUp()
		module.checkSpace()
		for i = 1, length-1 do
			safeForward()
		end
	end
end
 
-- set up our Mine task
module.addTasks {
	Mine = function (response)
		slice (response.length, response.depth)
	end
}
-- set up the module type to Miner
module.setType ("Miner")

-- set up the chest configuration
module.setChests {Fuel = 1, Stuff = 2}
-- get all the data from disk and Master
module.init ()
-- set fallback location
local fallback = module.getPosition()
fallback.y = module.getNaviData().height
module.setFallback (fallback)
module.operate ()