-- Mastermine is a Master part of turtle swarm quarry made by PonyKuu
-- It uses my master API v0.2
 
-- version 0.2

-- A little change to standard assert function 
_G.assert = function(condition, errMsg, level)
	if not condition then
        error(errMsg, (tonumber(level) or 1) + 1)
	end
	return condition
end
 
os.loadAPI ("master")
 
local tArgs = {...}
 
if #tArgs ~= 6 then
	print ("Usage: mastermine <xstart> <ystart> <zstart> <xsize> <ysize> <zsize>")
	return
end
 
-- set up a table with all the mining locations
local mineLocations = {}

-- convert all the coordinates into numbers 
for index, value in ipairs (tArgs) do
	tArgs[index] = tonumber (value)
	assert (type(tArgs[index] == "number", "Usage: mastermine <xstart> <ystart> <zstart> <ysize> <xsize> <zsize>", -1))
end

local xstart, ystart, zstart, xsize, ysize, zsize = unpack (tArgs)
for j = 0, zsize - 1 do
	local z = zstart + j
	table.insert (mineLocations, {x = xstart, y = ystart, z = z, f = 0})
end
 
-- Calculate the navigation zones. The point that divides area into zones is in the middle of the mining area.
local naviX = xstart
local naviZ = zstart + zsize/2
local naviHeight = ystart + 2
master.setNavigation {x = naviX, z = naviZ, height = naviHeight}

-- Set up the equipment configuration (it is default, but meh)
master.setEquipment {Fuel = 1, Stuff = 2, Turtle = 3}

local function mineMachine (ID)
	-- If there are untouched locations
	if #mineLocations > 0 then
		master.setState (ID, "Mining")
		-- remove one from table
		local nextLocation = table.remove (mineLocations)
		-- Some debug output
		print ("Module ", ID, " is mining at {", nextLocation.x, " ,", nextLocation.y, " ,", nextLocation.z, "}")
		-- And make a task to mine that location
		return master.makeTask ("Mine", nextLocation, {length = xsize, depth = ysize})
	else
		-- No locations. Return home.
		master.setState(ID, "Returning")
		print ("Module ", ID, " is returning to Master")
		return master.makeReturnTask ()
	end
end

-- Associate this function with type "Miner"
master.setType("Miner", mineMachine)
-- And initialize the master
master.init("modulemine", 100, 1000, #mineLocations)
 
local function stateFunction ()
	return #mineLocations > 0
end
master.operate (stateFunction)
print "Mining finished! Have a nice day!"
